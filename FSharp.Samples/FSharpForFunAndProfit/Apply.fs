//"apply" unpacks a function wrapped inside a elevated value ( E<(a->b)> ) into a lifted
//function E<a> -> E<b>
//E<(a->b)> -> E<a> -> E<b>

//An alternative interpretation of apply is that it is a two parameter function that takes a
//elevated value ( E<a> ) and a elevated function ( E<(a->b)> ), and returns a new elevated
//value ( E<b> ) generated by applying the function a->b to the internal elements of E<a> .

namespace Extensions

[<AutoOpen>]
module Option =

    //The apply function for Options
    let apply fOpt xOpt =
        match fOpt,xOpt with
        | Some f, Some x ->
            Some (f x)
        | _ -> None

[<AutoOpen>]
module List =

    //The apply function for Lists
    let apply (fList: ('a -> 'b) list) (xList: 'a list) =
        [ for f in fList do
            for x in xList do
            yield f x]